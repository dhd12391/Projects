**Bank Account Manager** - Create a class called Account which will be an abstract class for three other classes called CheckingAccount, SavingsAccount and BusinessAccount. 
Manage credits and debits from these accounts through an ATM style program.

//NOTE: Basic Bank Account Manager, no adding extra features like monthly rate increments.

Pseudocode: 

abstract class Card: //will have a list of accounts associated with card
  string id (get/set);
  string pin (get/set); 
  
  func changePIN():

class DebitCard extends Card:
  ArrayList<Account> myAccounts (get/set);  
  func addAccount():
  
class CreditCard extends Card:
  //implement cash advance, cash withdrawal limit? (Personally never owned one, so I will research regarding this)

abstract class Account:
  double currentAmount (get/set)

  func withdraw(double toBeWithdrawn):
    if (toBeWithdrawn > currentAmount):
	  print ("You are over-withdrawing! You only have $%.2f in your account!" , currentAmount);
	  return false;
	else if (toBeWithdrawn <= 0):
	  print "You cannot withdraw no money or negative money, silly!"
	  return false;
	else:
	  currentAmount -= toBeWithdrawn;
	  print ("You successfully withdrawn $%.2f from the account. Account now has $.2f", toBeWithdrawn, currentAmount);
	  return true;
	  
  func deposit(double toBeDeposited):
    if (toBeDeposited <= 0):
	  print "You cannot deposit no money or negative money, silly!"
	  return false;
	else:
	  currentAmount += toBeDeposited;
	  print ("You successfully deposited $%.2f from the account. Account now has $.2f", toBeDeposited, currentAmount);
	  return true;
	  	  
  func display():
    print ("This account currently has $%.2f",currentAmount);
  
  func transferTo(anotherAccount):
    double toBeTransferred = prompt "How much from this account do you want to withdraw?"
	if(this.withdraw(toBeTransferred)): //if withdrawal for transfer is successful
	  anotherAccount.deposit(toBeTransferred);
	  print "Transfer of $%.2f from thisAccount to anotherAccount was successful!", toBeTransferred);
	  return true;
	else:
	  return false
	  
class CheckingAccount extends Account; //for "everyday" usage


class SavingsAccount extends Account; //for saving up money


class BusinessAccount extends Account; //for the new startup!

class main: //ATM

/*****
  ATM: 3 Stages
    - User inserts card, enters PIN; If successful access, go to next stage
	- User decides what action to take, from what account, continues looping until user exits
	- User is returned the card
******/

  /************ First stage ******************/

  inputCardID = prompt "Welcome to The Elite Bank! Please input your card id: "
  if (inputCardID does NOT exist in list of valid card ID's) //card validation
    reject card

  inputCardPIN = prompt "Please input the PIN of this card: "
  if (inputCardPIN != cardID.getPin()) //pin validation
    while(numberOfTries < 3 || inputCardPin != cardID.getPin()) //pin validation continues
      numberOfTries++;
	  inputCardPIN = prompt "Incorrect PIN. Please try again (%d tries left): ", 3 - numberOfTries;
    if (inputCardPin != cardID.getPin()):
	  reject card, lock card & associated accounts
	//else, continue with simulation, as pin is valid
  
  /************ Second stage ******************/
